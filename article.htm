<!DOCTYPE HTML>
<!--------------------------------------------------------------------------->  
<!--                           INTRODUCTION                                

 The CodeProject article submission template (HTML version)

Using this template will help us post your article sooner. To use, just 
follow the 3 easy steps below:
 
     1. Fill in the article description details
     2. Add links to your images and downloads
     3. Include the main article text

That's all there is to it! All formatting will be done by our submission
scripts and style sheets. 

-->  
<!--------------------------------------------------------------------------->  
<!--                        IGNORE THIS SECTION                            -->
<html>
<head>
<title>CodeProject</title>
<Style>
BODY, P, TD { font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 10pt }
BODY {padding:15px; }
H2,H3,H4,H5 { color: #ff9900; font-weight: bold; }
H2 { font-size: 13pt; }
H3 { font-size: 12pt; }
H4 { font-size: 10pt; color: black; }
PRE { BACKGROUND-COLOR: #FBEDBB; FONT-FAMILY: "Courier New", Courier, mono; WHITE-SPACE: pre; }
CODE { COLOR: #990000; FONT-FAMILY: "Courier New", Courier, mono; }
</style>
<link type="text/css" rel="stylesheet" 
      href="https://codeproject.global.ssl.fastly.net/App_Themes/CodeProject/Css/Main.min.css">
</head>
<body bgcolor="#FFFFFF" color=#000000>
<!--------------------------------------------------------------------------->  


<!-------------------------------     STEP 1      --------------------------->
<!--  Fill in the details (CodeProject will reformat this section for you) -->

<pre>
Title:       4db: A dynamic file-based NoSQL database for C++
Description: Wanna add basic database functionality to your C++ app?  Too lazy to use SQLite directly?  Read on!
Abstract:    4db provides a simple, easy-to-use database engine for C++ projects.
             Based on SQLite, 4db is file-based and portable.
             It provides the common things you do with SQL-type data in a simple API.
             If you want to add basic data persistence to your project, look no further than 4db.

Author:      Michael Sydney Balloni
Email:       balloni.michael@yahoo.com

Language:    C++
Platform:    Portable, multi-platform
Technology:  SQLite
Topic:       Databases

Section      Not
SubSection   Sure

License:     Apache 2.0
</pre>

<!-------------------------------     STEP 2      --------------------------->
<!--  Include download and sample image information.                       --> 

<ul class=download>
    <!-- FORNOW - Add ZIP reference and size here -->
<li><a href="Article_demo.zip">Download demo project - XXX Kb </a></li>
<li><a href="Article_src.zip">Download source - XXX Kb</a></li>
</ul>

<!-------------------------------     STEP 3      --------------------------->

<!--  Add the article text. Please use simple formatting (<h2>, <p> etc)   -->

<h2>Background</h2>
<p>
    In this article we will cover the background, interface, and implementation of 4db,
    a dynamic, file-based NoSQL database for C++ projects.
</p>
<p>
    4db draws its roots from various things called metastrings over the years.
</p>
<p>
    metastrings has been many things, and is survived in .NET by 4db.net,
    which you can get on NuGet...but 4db is a new C++ port.
    It is modern, clean, and portable, and built on the SQLite C API.
</p>

<h2>Interface</h2>
<p>
    Interacting with 4db is best demonstrated with an annotated sample program...
</p>
<pre>
// FORNOW - Cars sample
</pre>

<h2>Implementation</h2>
<p>
    The metastrings concept was always to present what looks like a rows-and-columns SQL interface
    with an implementation in a "real" SQL database, only MySQL to start, and now only SQLite.
</p>
<p>
    The "virtual" schema's tables are pulled into separate real tables:
    <ul>
        <li>A registry of all tables in the virtual schema is stored in the real <u>tables</u>, um, table</li>
        <li>All columns in all tables are in the <u>names</u> table</li>
        <li>Every unique value in the entire database - string or double - is stored in the <u>values</u> table</li>
        <li>Each row in each virtual table is represented by a row in the real <u>items</u> table</li>
        <li>Everything is glued together by the <u>itemnamevalues</u> table, one row per data cell, itemid -> nameid -> valueid</li>
    </ul>
    Tons of overhead here, it would never perform well.
    But it's simple, and allows for a dynamic schema,
    and there are tons of use cases where performance isn't a concern.
    I see a bright future for this technology.
</p>

<h2>Conclusion</h2>
<p>
    I hope you've enjoyed learning about 4db.
    I invite all comments and questions.
    If you are interested in integrating 4db into your project,
    feel free to <a target="_blank" href="https://www.michaelballoni.com">reach out to me</a>
    and pick my brain anywhere along the way.
    Enjoy!
</p>


<!-------------------------------    That's it!   --------------------------->
</body>

</html>

